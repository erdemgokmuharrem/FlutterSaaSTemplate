rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUser() {
      return request.resource.data.keys().hasAll(['email', 'isPremium']) &&
             request.resource.data.email is string &&
             request.resource.data.isPremium is bool;
    }
    
    function isValidTodo() {
      return request.resource.data.keys().hasAll(['userId', 'title', 'completed']) &&
             request.resource.data.userId is string &&
             request.resource.data.title is string &&
             request.resource.data.completed is bool &&
             request.resource.data.title.size() > 0 &&
             request.resource.data.title.size() <= 100;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && isValidUser();
      allow update: if isOwner(userId) && isValidUser();
      allow delete: if isOwner(userId);
    }
    
    // Todos collection
    match /todos/{todoId} {
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       isValidTodo();
      
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.userId == request.auth.uid &&
                       isValidTodo();
      
      allow delete: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

